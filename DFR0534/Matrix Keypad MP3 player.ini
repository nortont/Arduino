/*
 Name:		12_button_voice_module.ino
 Created:	14/June/2021 4:06:02 PM
 Author:	Tim Norton
   -----------------------------------------------------
   Description
   Provide a box that has 16 input from pushbutton switches in a 4X3 matrix
   When a switch is triggered play an audio message via the DFRobot module
   DFR0534 https://wiki.dfrobot.com/Voice_Module_SKU__DFR0534
   
   Sleep mode when idle and wake every 100mS to scan for a button press
*/
 /*  ------------------------------------------------------
   Board
	 Adafruit 3458 328P https://learn.adafruit.com/adafruit-feather-328p-atmega328-atmega328p/downloads
   */
   
   /*------------------------------------------------------
   Inputs
Matrix 12 button keyboard  
  4 Rows 5, 6, 9, 10 (7 on oppisite side of board so not used)
  3 Columns 2, 3, 4
  Voice module busy 7
  Battery monitoring A6 (internally connected with 2x 100K voltage divider)
*/


const int VOICE_BUSY = 7;  //Voice module busy 
const int VBATPIN = A6; // Battery monitoring
const int BATMESSAGE = 17; // voice message number - based on the number of files, not actual file name

 /*   ------------------------------------------------------
  Outputs
*/
//const int LED_BATTERY = 13;


#include <Adafruit_SleepyDog.h>

#include <Keypad_Matrix.h> // https://github.com/nickgammon/Keypad_Matrix

void setupPins() {
	// Keypad pins on pins 2,3,4,5,6,9,10 in keymatrix below

//	pinMode(LED_BATTERY, OUTPUT);
//  pinMode(VOICE_PWR, OUTPUT);
  pinMode(VOICE_BUSY, INPUT);
  pinMode(VBATPIN, INPUT);
//  digitalWrite(VOICE_PWR, HIGH); // voice module on
}

// ------------------------------------------------------
// Define pins for keypad https://github.com/nickgammon/Keypad_Matrix
/* Uncomment for 4X3*/
//const byte ROWS = 4;
//const byte COLS = 3;
//
//char keyMap[ROWS][COLS] = {
//	{'a', 'b', 'c'},
//	{'d', 'e', 'f' },
//	{'g', 'h', 'i'},
//	{'j', 'k', 'l'}
//};
//
//byte colPins[COLS] = { 2, 3, 4 }; // row pins
//byte rowPins[ROWS] = { 5, 6, 9, 10 }; // col pins


/*Uncomment for 2X2 */
const byte ROWS = 2;
const byte COLS = 2;

char keyMap[ROWS][COLS] = {
  {'a', 'b'},
  {'c', 'd'}
};

byte colPins[COLS] = { 2, 3 }; // row pins
byte rowPins[ROWS] = { 5, 6 }; // col pins

// Create the keypad and map buttons with internall pullup resistors.
Keypad_Matrix kpd = Keypad_Matrix(makeKeymap(keyMap), rowPins, colPins, ROWS, COLS, true);
// ------------------------------------------------------


//  ------------------------------------------------------
// Define variables
unsigned char messageID = 0;
int messageIDPrev = 0;
bool messagePlay = false;

int tmrSleep=100; // mS to sleep
int sleepCount=0;
int btnResetCount=50; // clear the messageID if a sleepCount*tmrSleep has elapesd to allow a repeat press

//  ------------------------------------------------------
// Setup
void setup(void) {
	
	setupKeypad();
	setupVoice();
	setupPins();
  volume(0x10);//Volume settings 0x00-0x1E
  
}



/* -----------------------------------------------
	Main loop -------------------------------------
   ----------------------------------------------- */
void loop() {
	  if (!digitalRead(VOICE_BUSY)) {
		  delay(50);
		  Watchdog.sleep(100);
      delay(30);
      ++sleepCount; 
//      Serial.print("SleepCount ");
//        Serial.println(sleepCount);
      if(sleepCount >= btnResetCount){
        sleepCount = 0;
        messageID = 0;

      }
     kpd.scan(); // check for a key press, will call buttonDetect if a key pressed
    }
  }


void volume( unsigned char vol)
{
  unsigned char volume[5] = {0xAA,0x13,0x01,vol,vol+0xBE};
     Serial.write(volume,5);
 }

void setupKeypad() {
	kpd.begin(); // initilaise keypad
	kpd.setKeyDownHandler(buttonDetect); // function to respond to keypress
}


void setupVoice() {
		Serial.begin(9600);
			}



/* -----------------------------------------------
   Button Scan ----------------------------------
   Detect which button is pressed and set the message to be played
   Button must be held for a periond set in actionDelay
	----------------------------------------------- */
void buttonDetect(const char btn) {
  Serial.print("Button Detected ");
  Serial.println(btn);
  delay(5); // stops serial messages overlapping

	// Swtich the appropriate output to match the button
	messageIDPrev = messageID;
	
		if (btn == 'a') { // up
			messageID = 1;
			messagePlay = true;
		}
		else if (btn == 'b') { // dn
      messageID = 2;
			messagePlay = true;
    }
		else if (btn == 'c') { // left
			messageID = 3;
			messagePlay = true;
		}
		else if (btn == 'd') { // right
			messageID = 4;
			messagePlay = true;
		}
		else if (btn == 'e') { // 
			messageID = 5;
			messagePlay = true;
		}
		else if (btn == 'f') { // 
			messageID = 6;
			messagePlay = true;
		}

		else if (btn == 'g') { // 
			messageID = 7;
			messagePlay = true;
		}
		else if (btn == 'h') { // 
			messageID = 8;
			messagePlay = true;
		}
		else if (btn == 'i') { // 
			messageID = 9;
			messagePlay = true;
		}
		else if (btn == 'j') { // 
			messageID = 10;
			messagePlay = true;
		}
		else if (btn == 'k') { // 
			messageID = 11;
			messagePlay = true;
		}
		else if (btn == 'l') { // 
			messageID = 12;
			messagePlay = true;
		}
		else if (btn == 'm') { // 
			messageID = 13;
			messagePlay = true;
		}
		else if (btn == 'n') { // 
			messageID = 14;
			messagePlay = true;
		}
		else if (btn == 'o') { // 
			messageID = 15;
			messagePlay = true;
		}
		else if (btn == 'p') { // 
			messageID = 16;
			messagePlay = true;
		}
		else {
			messageID = 999; // joystick released
		}
	/* Battery test */
  float measured = batteryVoltage();
 
   if(measured<3.5){ // check if battery is low
      playRecording(BATMESSAGE);
    }
	if (messagePlay && (messageID != messageIDPrev && messageID != 999)) { // play specified message if different to last
		messagePlay = false;
//		Serial.print("File ");
//		Serial.println(messageID);
		playRecording(messageID);
    delay(5); // stops serial messages overlapping
   Serial.print("File ");
   Serial.println(messageID);
	}
 
}



void playRecording(unsigned char Track) {
  
  Serial.println("Playing");
  unsigned char play[6] = { 0xAA,0x07,0x02,0x00,Track,Track + 0xB3 };
	Serial.write(play, 6);
  sleepCount = 0; // reset repeat delay

}



/// <summary>
/// measure the voltage on analogue pin between 2x 100K resistors, gnd and VBAT
/// </summary>
/// <returns>
/// voltage as a float
/// </returns>
float batteryVoltage() {


  float measuredvbat = analogRead(VBATPIN);
  measuredvbat *= 2;    // we divided by 2, so multiply back
  measuredvbat *= 3.3;  // Multiply by 3.3V, our reference voltage
  measuredvbat /= 1024; // convert to voltage
    //Serial.print("VBat : "); Serial.println(measuredvbat);
  return measuredvbat;
}
